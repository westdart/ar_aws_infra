# {{ ansible_managed }}

# Setup the core provider information.
provider "aws" {
  region  = var.region
}

# Obtain information on the execution agent (person)
data "aws_caller_identity" "current" {}

# Setup common tags to be set against created resources
locals {
  # Common tags to be assigned to all resources
  common_tags = {
    "InfraName"         = "{{ ar_aws_infra_name }}"
    "Owner"             = data.aws_caller_identity.current.arn
    "User"              = data.aws_caller_identity.current.user_id
    "Account"           = data.aws_caller_identity.current.account_id
  }
}

# Create a public key reference in AWS for machines to accept
resource "aws_key_pair" "keypair" {
  key_name   = "{{ ar_aws_infra_name }}-sshkey"
  public_key = file(var.ssh-public-key-file)
}

{% if ar_aws_infra_create_cloud %}

# Create VPC and other cloud wide resources
## Setup IAM objects
resource "aws_iam_role" "sts-instance-role" {
  name = "{{ ar_aws_infra_name }}-sts-instance-role"

  assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
                "Service": "ec2.amazonaws.com"
            },
            "Effect": "Allow",
            "Sid": ""
        }
    ]
}
EOF

  tags = local.common_tags
}

//  This policy allows an instance to forward logs to CloudWatch, and
//  create the Log Stream or Log Group if it doesn't exist.
resource "aws_iam_policy" "application-policy-forward-logs" {
  name        = "{{ ar_aws_infra_name }}-instance-forward-logs"
  path        = "/"
  description = "Allows an instance to forward logs to CloudWatch"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
      ],
      "Resource": [
        "arn:aws:logs:*:*:*"
      ]
    }
  ]
}
EOF
}

//  Attach the policies to the roles.
resource "aws_iam_policy_attachment" "application-attachment-forward-logs" {
  name       = "{{ ar_aws_infra_name }}-attachment-forward-logs"
  roles      = [aws_iam_role.sts-instance-role.name]
  policy_arn = aws_iam_policy.application-policy-forward-logs.arn
}

//  Create a instance profile for the role.
resource "aws_iam_instance_profile" "sts-instance-profile" {
  name  = "{{ ar_aws_infra_name }}-sts-instance-profile"
  role = "${aws_iam_role.sts-instance-role.name}"
}

//  Create a user and access key for application-only permissions
resource "aws_iam_user" "application-aws-user" {
  name = "{{ ar_aws_infra_name }}-aws-user"
  path = "/"

  tags = local.common_tags
}

//  Policy taken from https://github.com/openshift/openshift-ansible-contrib/blob/9a6a546581983ee0236f621ae8984aa9dfea8b6e/reference-architecture/aws-ansible/playbooks/roles/cloudformation-infra/files/greenfield.json.j2#L844
resource "aws_iam_user_policy" "application-aws-user" {
  name = "{{ ar_aws_infra_name }}-aws-user-policy"
  user = aws_iam_user.application-aws-user.name

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeVolume*",
        "ec2:CreateVolume",
        "ec2:CreateTags",
        "ec2:DescribeInstance*",
        "ec2:AttachVolume",
        "ec2:DetachVolume",
        "ec2:DeleteVolume",
        "ec2:DescribeSubnets",
        "ec2:CreateSecurityGroup",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeRouteTables",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:RevokeSecurityGroupIngress",
        "elasticloadbalancing:DescribeTags",
        "elasticloadbalancing:CreateLoadBalancerListeners",
        "elasticloadbalancing:ConfigureHealthCheck",
        "elasticloadbalancing:DeleteLoadBalancerListeners",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:CreateLoadBalancer",
        "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:DescribeLoadBalancerAttributes"
      ],
      "Resource": "*"
    }
  ]
}
EOF
}

resource "aws_iam_access_key" "application-aws-user" {
  user    = aws_iam_user.application-aws-user.name
}

## Create VPC
resource "aws_vpc" "cloud" {
  cidr_block           = "{{ ar_aws_infra_cloud_cidr }}"
  enable_dns_hostnames = true
  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ ar_aws_infra_description }}"
    )
  )
}

locals {
{% if ar_aws_infra_create_cloud %}
  vpc_id = aws_vpc.cloud.id
{% else %}
  vpc_id = "{{ ar_aws_infra_vpc_id }}"
{% endif %}
}

## Add Network resources
// TODO: review - Create an Internet Gateway for the VPC.
resource "aws_internet_gateway" "default_gateway" {
  vpc_id = local.vpc_id
  tags   = local.common_tags
}

// TODO: review - Create a route table allowing all addresses access to the IGW.
resource "aws_route_table" "public_route" {
  vpc_id = local.vpc_id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.default_gateway.id
  }
  tags = local.common_tags
}

## Add Security Groups
// TODO - refactor all this into the 'custom' security groups - i.e. make it all data defined
//  This security group allows intra-node communication on all ports with all
//  protocols.
//  Security group which allows SSH access to a host.
resource "aws_security_group" "cloud-ssh" {
  name        = "cloud-ssh"
  description = "Security group that allows public ingress over SSH."
  vpc_id      = local.vpc_id

  //  SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.common_tags
}

//  This security group allows public ingress to the instances for HTTP, HTTPS
//  and common HTTP/S proxy ports.
resource "aws_security_group" "web-public-ingress" {
  name        = "web-public-ingress"
  description = "Security group that allows public ingress to instances, HTTP, HTTPS and more."
  vpc_id      = local.vpc_id

  //  HTTP
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  //  HTTP Proxy
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  //  HTTPS
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  //  HTTPS Proxy
  ingress {
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.common_tags
}

//  This security group allows public egress from the instances for HTTP and
//  HTTPS, which is needed for yum updates, git access etc etc.
resource "aws_security_group" "web-public-egress" {
  name        = "web-public-egress"
  description = "Security group that allows egress to the internet for instances over HTTP and HTTPS."
  vpc_id      = local.vpc_id

  //  HTTP
  egress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  //  HTTPS
  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.common_tags
}


{% if ar_aws_infra_use_aws_dns %}
## Create the internal DNS.
resource "aws_route53_zone" "internal" {
  name = {{ ar_aws_infra_domain }}
  comment = "Internal DNS"
  vpc {
    vpc_id = local.vpc_id
  }

  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ ar_aws_infra_description }} Internal DNS"
    )
  )
}
{% endif %}

{% endif %} {# ar_aws_infra_create_cloud #}

# Create environment subnets and route table associations
{% for env in ar_aws_infra_envs %}
resource "aws_subnet" "{{ env['prefix'] }}_public_subnet" {
  vpc_id                  = local.vpc_id
  cidr_block              = "{{ env['subnet_cidr'] }}"
  availability_zone       = "{{ env['availability_zone'] }}"
  map_public_ip_on_launch = true
{% if ar_aws_infra_create_cloud %}
  depends_on              = ["aws_vpc.cloud"]
{% endif %}
  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ env['subnet_name'] }}",
      "Type", "Public",
      "infra_name", "{{ ar_aws_infra_name }}"
    )
  )
}
resource "aws_route_table_association" "{{ env['prefix'] }}_public_subnet_asoc" {
  subnet_id      = aws_subnet.{{ env['prefix'] }}_public_subnet.id
{% if ar_aws_infra_create_cloud %}
  route_table_id = aws_route_table.public_route.id
{% else %}
  route_table_id = "{{ ar_aws_infra_main_route_table_id }}"
{% endif %}
}

{% endfor %}


# Create custom security groups
{% for security_group in ar_aws_infra_security_groups %}
resource "aws_security_group" "{{ security_group['name'] }}" {
  name        = "{{ security_group['name'] }}"
  description = "{{ security_group['description'] }}"
  vpc_id      = local.vpc_id

{% for ingress_rule in ar_aws_infra_network_rules | select_from_array_of_dicts('name', security_group['network_rule_refs']) | json_query("[*].ingres_rules") | flatten %}
  ingress {
    from_port = "{{ ingress_rule['from_port']    | default("0") }}"
    to_port   = "{{ ingress_rule['to_port']      | default("0") }}"
    protocol  = "{{ ingress_rule['protocol']     | default("-1") }}"
    self      = {{ ingress_rule['self']          | default("true") }}
    cidr_blocks = {{ ingress_rule['cidr_blocks'] | default(ar_aws_infra_envs | json_query("[?prefix=='" + security_group['env'] + "'].subnet_cidr")) | double_quote_string_array }}
  }

{% endfor %}

{% for egres_rule in ar_aws_infra_network_rules | select_from_array_of_dicts('name', security_group['network_rule_refs']) | json_query("[*].egres_rules") | flatten %}
  egress {
    from_port = "{{ egres_rule['from_port']    | default("0") }}"
    to_port   = "{{ egres_rule['to_port']      | default("0") }}"
    protocol  = "{{ egres_rule['protocol']     | default("-1") }}"
    self      = {{ egres_rule['self']          | default("true") }}
    cidr_blocks = {{ egres_rule['cidr_blocks'] | default(ar_aws_infra_envs | json_query("[?prefix=='" + security_group['env'] + "'].subnet_cidr")) | double_quote_string_array }}
  }

{% endfor %}
  tags = merge(
           local.common_tags,
           map(
             "Name", "{{ security_group['name'] }}",
             "infra_name", "{{ ar_aws_infra_name }}"
           )
         )
}

{% endfor %}

{% for image in ar_aws_infra_ami_images %}
# Establish AMIs to use
# Find the AMI by:
# Account, Latest, x86_64, EBS, HVM, OS Name
data "aws_ami" "{{ image['name'] }}_aws_ami" {
  most_recent = true

  owners = ["{{ image['account'] }}"]

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "name"
    values = ["{{ image['filter'] }}"]
  }
}

{% endfor %}


{% if ar_aws_infra_create_cloud %}
{% set common_security_groups = ['aws_security_group.cloud-ssh.id', 'aws_security_group.web-public-ingress.id', 'aws_security_group.web-public-egress.id'] | join(',') %}
{% set common_instance_profile = 'aws_iam_instance_profile.sts-instance-profile.id' %}
{% else %}
{% set common_security_groups = ar_aws_infra_existing_security_groups | quoted_csv %}
{% set common_instance_profile = [ar_aws_infra_instance_profile_id] | quoted_csv %}
{% endif %}

# Create all environment nodes
{% for env in ar_aws_infra_envs %}
{% for node_group in env['node_groups'] %}
{% set root_bock_device_obj = ar_aws_infra_machine_types[node_group['machine_type']]['root_block_device'] | default(ar_aws_infra_root_block_device) %}

{% for machine_index in range(node_group['count'] | default('1')) %}
{% set machine_num = machine_index + 1 %}
{% if node_group['count'] == 1 %}
{%   set host_name = env['prefix'] + '-' + node_group['name'] + '.' + ar_aws_infra_domain %}
{% else %}
{%   set host_name = env['prefix'] + '-' + node_group['name'] + machine_num | string + '.' + ar_aws_infra_domain %}
{% endif %}
{% if 'subnet_id' in env %}
{% set common_subnet_id = '"' + env['subnet_id'] + '"' %}
{% else %}
{% set common_subnet_id = "aws_subnet." + env['prefix'] + "_public_subnet.id" %}
{% endif %}
resource "aws_instance" "{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}" {
  ami                    = data.aws_ami.{{ ar_aws_infra_machine_types[node_group['machine_type']]['image'] }}_aws_ami.id
  instance_type          = "{{ ar_aws_infra_machine_types[node_group['machine_type']]['type'] }}"
  iam_instance_profile   = {{ common_instance_profile }}
  subnet_id              = {{ common_subnet_id }}
  vpc_security_group_ids = [{{ common_security_groups }},
                            {% for security_group in ar_aws_infra_security_groups|json_query("[?env=='" + env['prefix'] +"']") %}{% if security_group['env'] == env['prefix'] %}aws_security_group.{{ security_group['name'] }}.id{% endif %}{% if not loop.last %},
                            {% endif %}{% endfor %}]
  key_name               = "{{ ar_aws_infra_name }}-sshkey"

  root_block_device {
    volume_size = {{ root_bock_device_obj['size'] }}
    volume_type = "{{ root_bock_device_obj['type'] }}"
  }

{% if node_group['machine_type'] in ar_aws_infra_machine_types and ar_aws_infra_machine_types[node_group['machine_type']]['block_devices'] | length > 0 %}
  dynamic "ebs_block_device" {
    for_each = [
{% for block_device in ar_aws_infra_machine_types[node_group['machine_type']]['block_devices'] %}
      {
        device_name = "{{ block_device['device'] }}"
        volume_size = {{ block_device['size'] }}
        volume_type = "{{ block_device['type'] }}"
      }{{ ',' if not loop.last else '' }}
{% endfor %}
    ]
    content {
      device_name = ebs_block_device.value.device_name
      volume_size = ebs_block_device.value.volume_size
      volume_type = ebs_block_device.value.volume_type
    }
  }
{% endif %}

  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ host_name }}"
    )
  )
}

{% if ar_aws_infra_use_aws_dns %}
resource "aws_route53_record" "{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}_a-record" {
  zone_id = aws_route53_zone.internal.zone_id
  name    = {{ host_name }}
  type    = "A"
  ttl     = 300
  records = [
      aws_instance.instance_{{ machine_num }}.private_ip
  ]
}
{% endif %}

{% if 'external_ip' in ar_aws_infra_machine_types[node_group['machine_type']] and ar_aws_infra_machine_types[node_group['machine_type']]['external_ip'] %}
// Get elastic IP for server if required.
resource "aws_eip" "{{ env['prefix'] }}_{{ node_groupcf }}_instance_{{ machine_num }}_instance_eip" {
  instance = aws_instance.{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}.id
  vpc      = true
  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ host_name }}"
    )
  )
}
{% endif %}
{% endfor %}

{% endfor %}

{% endfor %}
