# {{ ansible_managed }}

# Setup the core provider information.
provider "aws" {
  region  = var.region
}

# Obtain information on the execution agent (person)
data "aws_caller_identity" "current" {}

# Setup common tags to be set against created resources
locals {
  # Common tags to be assigned to all resources
  common_tags = {
    "InfraName"         = "{{ ar_aws_infra_name }}"
    "Owner"             = data.aws_caller_identity.current.arn
    "User"              = data.aws_caller_identity.current.user_id
    "Account"           = data.aws_caller_identity.current.account_id
  }
}

# Create a public key reference in AWS for machines to accept
resource "aws_key_pair" "keypair" {
  key_name   = "{{ ar_aws_infra_name }}-sshkey"
  public_key = file(var.ssh-public-key-file)
}

{% if ar_aws_infra_create_cloud %}
# Setup IAM objects
module "aws-iam" {
  source      = "{{ ar_aws_infra_terraform_modules_dir }}/modules/aws-iam"
  name        = "{{ ar_aws_infra_name }}"
  prefix      = "{{ ar_aws_infra_name }}-"
  common-tags = local.common_tags
}

# Create VPC and other cloud wide resources
module "aws-cloud" {
  source         = "{{ ar_aws_infra_terraform_modules_dir }}/modules/aws-cloud"
  cloud_cidr     = "{{ ar_aws_infra_cloud_cidr }}"
  cloud_name     = "{{ ar_aws_infra_description }}"
  common-tags    = local.common_tags
}

{% if ar_aws_infra_use_aws_dns %}
# Setup cloud DNS zone
module "aws-dns" {
  source = "{{ ar_aws_infra_terraform_modules_dir }}/modules/aws-dns"
  name = "Internal DNS"
  vpc-id = {{ ar_aws_infra_vpc_id | default('module.aws-cloud.vpc-id') }}
  zone-domain = "{{ ar_aws_infra_domain }}"
}
{% endif %}

{% endif %} {# ar_aws_infra_create_cloud #}

locals {
{% if ar_aws_infra_create_cloud %}
  vpc_id = module.aws-cloud.vpc-id
{% else %}
  vpc_id = "{{ ar_aws_infra_vpc_id }}"
{% endif %}
}

# Create environment subnets and route table associations
{% for env in ar_aws_infra_envs %}
resource "aws_subnet" "{{ env['prefix'] }}_public_subnet" {
  vpc_id                  = local.vpc_id
  cidr_block              = "{{ env['subnet_cidr'] }}"
  availability_zone       = "{{ env['availability_zone'] }}"
  map_public_ip_on_launch = true
{% if ar_aws_infra_create_cloud %}
  depends_on              = ["module.aws-cloud"]
{% endif %}
  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ env['subnet_name'] }}",
      "Type", "Public",
      "infra_name", "{{ ar_aws_infra_name }}"
    )
  )
}
resource "aws_route_table_association" "{{ env['prefix'] }}_public_subnet_asoc" {
  subnet_id      = aws_subnet.{{ env['prefix'] }}_public_subnet.id
{% if ar_aws_infra_create_cloud %}
  route_table_id = module.aws-cloud.public_route_id
{% else %}
  route_table_id = "{{ ar_aws_infra_main_route_table_id }}"
{% endif %}
}

{% endfor %}


# Create custom security groups
{% for security_group in ar_aws_infra_security_groups %}
resource "aws_security_group" "{{ security_group['name'] }}" {
  name        = "{{ security_group['name'] }}"
  description = "{{ security_group['description'] }}"
  vpc_id      = local.vpc_id

{% for ingress_rule in ar_aws_infra_network_rules | select_from_array_of_dicts('name', security_group['network_rule_refs']) | json_query("[*].ingres_rules") | flatten %}
  ingress {
    from_port = "{{ ingress_rule['from_port']    | default("0") }}"
    to_port   = "{{ ingress_rule['to_port']      | default("0") }}"
    protocol  = "{{ ingress_rule['protocol']     | default("-1") }}"
    self      = {{ ingress_rule['self']          | default("true") }}
    cidr_blocks = {{ ingress_rule['cidr_blocks'] | default(ar_aws_infra_envs | json_query("[?prefix=='" + security_group['env'] + "'].subnet_cidr")) | double_quote_string_array }}
  }

{% endfor %}

{% for egres_rule in ar_aws_infra_network_rules | select_from_array_of_dicts('name', security_group['network_rule_refs']) | json_query("[*].egres_rules") | flatten %}
  egress {
    from_port = "{{ egres_rule['from_port']    | default("0") }}"
    to_port   = "{{ egres_rule['to_port']      | default("0") }}"
    protocol  = "{{ egres_rule['protocol']     | default("-1") }}"
    self      = {{ egres_rule['self']          | default("true") }}
    cidr_blocks = {{ egres_rule['cidr_blocks'] | default(ar_aws_infra_envs | json_query("[?prefix=='" + security_group['env'] + "'].subnet_cidr")) | double_quote_string_array }}
  }

{% endfor %}
  tags = merge(
           local.common_tags,
           map(
             "Name", "{{ security_group['name'] }}",
             "infra_name", "{{ ar_aws_infra_name }}"
           )
         )
}

{% endfor %}

{% for image in ar_aws_infra_ami_images %}
# Establish AMIs to use
module "{{ image['name'] }}-images" {
  source      = "{{ ar_aws_infra_terraform_modules_dir }}/modules/aws-images"
  account_num = "{{ image['account'] }}"
  os_name = "{{ image['filter'] }}"
}
{% endfor %}


{% if ar_aws_infra_create_cloud %}
{% set common_security_groups = ['module.aws-cloud.public-security-group', 'module.aws-cloud.ingres-security-group', 'module.aws-cloud.egres-security-group'] | join(',') %}
{% set common_instance_profile = 'module.aws-iam.sts-instance-profile-id' %}
{% else %}
{% set common_security_groups = ar_aws_infra_existing_security_groups | quoted_csv %}
{% set common_instance_profile = [ar_aws_infra_instance_profile_id] | quoted_csv %}
{% endif %}

# Create all environment nodes
{% for env in ar_aws_infra_envs %}
{% for node_group in env['node_groups'] %}
{% set root_bock_device_obj = ar_aws_infra_machine_types[node_group['machine_type']]['root_block_device'] | default(ar_aws_infra_root_block_device) %}

{% for machine_index in range(node_group['count'] | default('1')) %}
{% set machine_num = machine_index + 1 %}
{% if node_group['count'] == 1 %}
{%   set host_name = env['prefix'] + '-' + node_group['name'] + '.' + ar_aws_infra_domain %}
{% else %}
{%   set host_name = env['prefix'] + '-' + node_group['name'] + machine_num | string + '.' + ar_aws_infra_domain %}
{% endif %}
{% if 'subnet_id' in env %}
{% set common_subnet_id = '"' + env['subnet_id'] + '"' %}
{% else %}
{% set common_subnet_id = "aws_subnet." + env['prefix'] + "_public_subnet.id" %}
{% endif %}
resource "aws_instance" "{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}" {
  ami                    = module.{{ ar_aws_infra_machine_types[node_group['machine_type']]['image'] }}-images.ami_id
  instance_type          = "{{ ar_aws_infra_machine_types[node_group['machine_type']]['type'] }}"
  iam_instance_profile   = {{ common_instance_profile }}
  subnet_id              = {{ common_subnet_id }}
  vpc_security_group_ids = [{{ common_security_groups }},
                            {% for security_group in ar_aws_infra_security_groups %}{% if security_group['env'] == env['prefix'] %}aws_security_group.{{ security_group['name'] }}.id{% endif %}{% if not loop.last %},
                            {% endif %}{% endfor %}]
  key_name               = "{{ ar_aws_infra_name }}-sshkey"

  root_block_device {
    volume_size = {{ root_bock_device_obj['size'] }}
    volume_type = "{{ root_bock_device_obj['type'] }}"
  }

{% if node_group['machine_type'] in ar_aws_infra_machine_types and ar_aws_infra_machine_types[node_group['machine_type']]['block_devices'] | length > 0 %}
  dynamic "ebs_block_device" {
    for_each = [
{% for block_device in ar_aws_infra_machine_types[node_group['machine_type']]['block_devices'] %}
      {
        device_name = "{{ block_device['device'] }}"
        volume_size = {{ block_device['size'] }}
        volume_type = "{{ block_device['type'] }}"
      }{{ ',' if not loop.last else '' }}
{% endfor %}
    ]
    content {
      device_name = ebs_block_device.value.device_name
      volume_size = ebs_block_device.value.volume_size
      volume_type = ebs_block_device.value.volume_type
    }
  }
{% endif %}

  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ host_name }}"
    )
  )
}

{% if ar_aws_infra_use_aws_dns %}
resource "aws_route53_record" "{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}_a-record" {
  zone_id = module.aws-dns.zone-id
  name    = {{ host_name }}
  type    = "A"
  ttl     = 300
  records = [
      aws_instance.instance_{{ machine_num }}.private_ip
  ]
}
{% endif %}

{% if 'external_ip' in ar_aws_infra_machine_types[node_group['machine_type']] and ar_aws_infra_machine_types[node_group['machine_type']]['external_ip'] %}
// Get elastic IP for server if required.
resource "aws_eip" "{{ env['prefix'] }}_{{ node_groupcf }}_instance_{{ machine_num }}_instance_eip" {
  instance = aws_instance.{{ env['prefix'] }}_{{ node_group['name'] }}_instance_{{ machine_num }}.id
  vpc      = true
  tags = merge(
    local.common_tags,
    map(
      "Name", "{{ host_name }}"
    )
  )
}
{% endif %}
{% endfor %}

{% endfor %}

{% endfor %}
